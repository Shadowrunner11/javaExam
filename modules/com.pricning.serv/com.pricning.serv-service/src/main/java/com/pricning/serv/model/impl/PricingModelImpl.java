/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pricning.serv.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.pricning.serv.model.Pricing;
import com.pricning.serv.model.PricingModel;
import com.pricning.serv.model.PricingSoap;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Pricing service. Represents a row in the &quot;PRINCING_Pricing&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PricingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PricingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PricingImpl
 * @generated
 */
@JSON(strict = true)
public class PricingModelImpl
	extends BaseModelImpl<Pricing> implements PricingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pricing model instance should use the <code>Pricing</code> interface instead.
	 */
	public static final String TABLE_NAME = "PRINCING_Pricing";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"firstName", Types.VARCHAR}, {"lastName", Types.VARCHAR},
		{"carModel", Types.VARCHAR}, {"identityDocument", Types.VARCHAR},
		{"sucursal", Types.VARCHAR}, {"department", Types.VARCHAR},
		{"province", Types.VARCHAR}, {"productType", Types.VARCHAR},
		{"productModel", Types.VARCHAR}, {"productVersion", Types.VARCHAR},
		{"contactChannel", Types.VARCHAR}, {"phone", Types.VARCHAR},
		{"clientType", Types.VARCHAR}, {"email", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("carModel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("identityDocument", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sucursal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("department", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("province", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productModel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactChannel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PRINCING_Pricing (uuid_ VARCHAR(75) null,id_ LONG not null primary key,firstName VARCHAR(75) null,lastName VARCHAR(75) null,carModel VARCHAR(75) null,identityDocument VARCHAR(75) null,sucursal VARCHAR(75) null,department VARCHAR(75) null,province VARCHAR(75) null,productType VARCHAR(75) null,productModel VARCHAR(75) null,productVersion VARCHAR(75) null,contactChannel VARCHAR(75) null,phone VARCHAR(75) null,clientType VARCHAR(75) null,email VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table PRINCING_Pricing";

	public static final String ORDER_BY_JPQL = " ORDER BY pricing.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PRINCING_Pricing.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Pricing toModel(PricingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Pricing model = new PricingImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setCarModel(soapModel.getCarModel());
		model.setIdentityDocument(soapModel.getIdentityDocument());
		model.setSucursal(soapModel.getSucursal());
		model.setDepartment(soapModel.getDepartment());
		model.setProvince(soapModel.getProvince());
		model.setProductType(soapModel.getProductType());
		model.setProductModel(soapModel.getProductModel());
		model.setProductVersion(soapModel.getProductVersion());
		model.setContactChannel(soapModel.getContactChannel());
		model.setPhone(soapModel.getPhone());
		model.setClientType(soapModel.getClientType());
		model.setEmail(soapModel.getEmail());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Pricing> toModels(PricingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Pricing> models = new ArrayList<Pricing>(soapModels.length);

		for (PricingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PricingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Pricing.class;
	}

	@Override
	public String getModelClassName() {
		return Pricing.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Pricing, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Pricing, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Pricing, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Pricing)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Pricing, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Pricing, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Pricing)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Pricing, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Pricing, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Pricing, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Pricing, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Pricing, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Pricing, Object>>();
		Map<String, BiConsumer<Pricing, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Pricing, ?>>();

		attributeGetterFunctions.put("uuid", Pricing::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Pricing, String>)Pricing::setUuid);
		attributeGetterFunctions.put("id", Pricing::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Pricing, Long>)Pricing::setId);
		attributeGetterFunctions.put("firstName", Pricing::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName", (BiConsumer<Pricing, String>)Pricing::setFirstName);
		attributeGetterFunctions.put("lastName", Pricing::getLastName);
		attributeSetterBiConsumers.put(
			"lastName", (BiConsumer<Pricing, String>)Pricing::setLastName);
		attributeGetterFunctions.put("carModel", Pricing::getCarModel);
		attributeSetterBiConsumers.put(
			"carModel", (BiConsumer<Pricing, String>)Pricing::setCarModel);
		attributeGetterFunctions.put(
			"identityDocument", Pricing::getIdentityDocument);
		attributeSetterBiConsumers.put(
			"identityDocument",
			(BiConsumer<Pricing, String>)Pricing::setIdentityDocument);
		attributeGetterFunctions.put("sucursal", Pricing::getSucursal);
		attributeSetterBiConsumers.put(
			"sucursal", (BiConsumer<Pricing, String>)Pricing::setSucursal);
		attributeGetterFunctions.put("department", Pricing::getDepartment);
		attributeSetterBiConsumers.put(
			"department", (BiConsumer<Pricing, String>)Pricing::setDepartment);
		attributeGetterFunctions.put("province", Pricing::getProvince);
		attributeSetterBiConsumers.put(
			"province", (BiConsumer<Pricing, String>)Pricing::setProvince);
		attributeGetterFunctions.put("productType", Pricing::getProductType);
		attributeSetterBiConsumers.put(
			"productType",
			(BiConsumer<Pricing, String>)Pricing::setProductType);
		attributeGetterFunctions.put("productModel", Pricing::getProductModel);
		attributeSetterBiConsumers.put(
			"productModel",
			(BiConsumer<Pricing, String>)Pricing::setProductModel);
		attributeGetterFunctions.put(
			"productVersion", Pricing::getProductVersion);
		attributeSetterBiConsumers.put(
			"productVersion",
			(BiConsumer<Pricing, String>)Pricing::setProductVersion);
		attributeGetterFunctions.put(
			"contactChannel", Pricing::getContactChannel);
		attributeSetterBiConsumers.put(
			"contactChannel",
			(BiConsumer<Pricing, String>)Pricing::setContactChannel);
		attributeGetterFunctions.put("phone", Pricing::getPhone);
		attributeSetterBiConsumers.put(
			"phone", (BiConsumer<Pricing, String>)Pricing::setPhone);
		attributeGetterFunctions.put("clientType", Pricing::getClientType);
		attributeSetterBiConsumers.put(
			"clientType", (BiConsumer<Pricing, String>)Pricing::setClientType);
		attributeGetterFunctions.put("email", Pricing::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Pricing, String>)Pricing::setEmail);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	@Override
	public String getCarModel() {
		if (_carModel == null) {
			return "";
		}
		else {
			return _carModel;
		}
	}

	@Override
	public void setCarModel(String carModel) {
		_carModel = carModel;
	}

	@JSON
	@Override
	public String getIdentityDocument() {
		if (_identityDocument == null) {
			return "";
		}
		else {
			return _identityDocument;
		}
	}

	@Override
	public void setIdentityDocument(String identityDocument) {
		_identityDocument = identityDocument;
	}

	@JSON
	@Override
	public String getSucursal() {
		if (_sucursal == null) {
			return "";
		}
		else {
			return _sucursal;
		}
	}

	@Override
	public void setSucursal(String sucursal) {
		_sucursal = sucursal;
	}

	@JSON
	@Override
	public String getDepartment() {
		if (_department == null) {
			return "";
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		_department = department;
	}

	@JSON
	@Override
	public String getProvince() {
		if (_province == null) {
			return "";
		}
		else {
			return _province;
		}
	}

	@Override
	public void setProvince(String province) {
		_province = province;
	}

	@JSON
	@Override
	public String getProductType() {
		if (_productType == null) {
			return "";
		}
		else {
			return _productType;
		}
	}

	@Override
	public void setProductType(String productType) {
		_productType = productType;
	}

	@JSON
	@Override
	public String getProductModel() {
		if (_productModel == null) {
			return "";
		}
		else {
			return _productModel;
		}
	}

	@Override
	public void setProductModel(String productModel) {
		_productModel = productModel;
	}

	@JSON
	@Override
	public String getProductVersion() {
		if (_productVersion == null) {
			return "";
		}
		else {
			return _productVersion;
		}
	}

	@Override
	public void setProductVersion(String productVersion) {
		_productVersion = productVersion;
	}

	@JSON
	@Override
	public String getContactChannel() {
		if (_contactChannel == null) {
			return "";
		}
		else {
			return _contactChannel;
		}
	}

	@Override
	public void setContactChannel(String contactChannel) {
		_contactChannel = contactChannel;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public String getClientType() {
		if (_clientType == null) {
			return "";
		}
		else {
			return _clientType;
		}
	}

	@Override
	public void setClientType(String clientType) {
		_clientType = clientType;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Pricing.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Pricing toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Pricing>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PricingImpl pricingImpl = new PricingImpl();

		pricingImpl.setUuid(getUuid());
		pricingImpl.setId(getId());
		pricingImpl.setFirstName(getFirstName());
		pricingImpl.setLastName(getLastName());
		pricingImpl.setCarModel(getCarModel());
		pricingImpl.setIdentityDocument(getIdentityDocument());
		pricingImpl.setSucursal(getSucursal());
		pricingImpl.setDepartment(getDepartment());
		pricingImpl.setProvince(getProvince());
		pricingImpl.setProductType(getProductType());
		pricingImpl.setProductModel(getProductModel());
		pricingImpl.setProductVersion(getProductVersion());
		pricingImpl.setContactChannel(getContactChannel());
		pricingImpl.setPhone(getPhone());
		pricingImpl.setClientType(getClientType());
		pricingImpl.setEmail(getEmail());

		pricingImpl.resetOriginalValues();

		return pricingImpl;
	}

	@Override
	public int compareTo(Pricing pricing) {
		long primaryKey = pricing.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Pricing)) {
			return false;
		}

		Pricing pricing = (Pricing)object;

		long primaryKey = pricing.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Pricing> toCacheModel() {
		PricingCacheModel pricingCacheModel = new PricingCacheModel();

		pricingCacheModel.uuid = getUuid();

		String uuid = pricingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			pricingCacheModel.uuid = null;
		}

		pricingCacheModel.id = getId();

		pricingCacheModel.firstName = getFirstName();

		String firstName = pricingCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			pricingCacheModel.firstName = null;
		}

		pricingCacheModel.lastName = getLastName();

		String lastName = pricingCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			pricingCacheModel.lastName = null;
		}

		pricingCacheModel.carModel = getCarModel();

		String carModel = pricingCacheModel.carModel;

		if ((carModel != null) && (carModel.length() == 0)) {
			pricingCacheModel.carModel = null;
		}

		pricingCacheModel.identityDocument = getIdentityDocument();

		String identityDocument = pricingCacheModel.identityDocument;

		if ((identityDocument != null) && (identityDocument.length() == 0)) {
			pricingCacheModel.identityDocument = null;
		}

		pricingCacheModel.sucursal = getSucursal();

		String sucursal = pricingCacheModel.sucursal;

		if ((sucursal != null) && (sucursal.length() == 0)) {
			pricingCacheModel.sucursal = null;
		}

		pricingCacheModel.department = getDepartment();

		String department = pricingCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			pricingCacheModel.department = null;
		}

		pricingCacheModel.province = getProvince();

		String province = pricingCacheModel.province;

		if ((province != null) && (province.length() == 0)) {
			pricingCacheModel.province = null;
		}

		pricingCacheModel.productType = getProductType();

		String productType = pricingCacheModel.productType;

		if ((productType != null) && (productType.length() == 0)) {
			pricingCacheModel.productType = null;
		}

		pricingCacheModel.productModel = getProductModel();

		String productModel = pricingCacheModel.productModel;

		if ((productModel != null) && (productModel.length() == 0)) {
			pricingCacheModel.productModel = null;
		}

		pricingCacheModel.productVersion = getProductVersion();

		String productVersion = pricingCacheModel.productVersion;

		if ((productVersion != null) && (productVersion.length() == 0)) {
			pricingCacheModel.productVersion = null;
		}

		pricingCacheModel.contactChannel = getContactChannel();

		String contactChannel = pricingCacheModel.contactChannel;

		if ((contactChannel != null) && (contactChannel.length() == 0)) {
			pricingCacheModel.contactChannel = null;
		}

		pricingCacheModel.phone = getPhone();

		String phone = pricingCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			pricingCacheModel.phone = null;
		}

		pricingCacheModel.clientType = getClientType();

		String clientType = pricingCacheModel.clientType;

		if ((clientType != null) && (clientType.length() == 0)) {
			pricingCacheModel.clientType = null;
		}

		pricingCacheModel.email = getEmail();

		String email = pricingCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			pricingCacheModel.email = null;
		}

		return pricingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Pricing, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Pricing, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Pricing, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Pricing)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Pricing, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Pricing, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Pricing, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Pricing)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Pricing>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Pricing.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private String _firstName;
	private String _lastName;
	private String _carModel;
	private String _identityDocument;
	private String _sucursal;
	private String _department;
	private String _province;
	private String _productType;
	private String _productModel;
	private String _productVersion;
	private String _contactChannel;
	private String _phone;
	private String _clientType;
	private String _email;
	private long _columnBitmask;
	private Pricing _escapedModel;

}